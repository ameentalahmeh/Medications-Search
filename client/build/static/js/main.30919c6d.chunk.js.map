{"version":3,"sources":["components/SearchBar/index.js","components/Table/index.js","Views/HomeView/index.js","App.js","index.js"],"names":["SearchBar","props","className","id","type","name","placeholder","value","onClick","onAction","Table","Medications","medications","MedicationsKeys","Object","keys","map","mkey","index","key","toUpperCase","substring","length","medication","description","drugcode","diseasecode","xml","require","x2js","HomeView","readInputs","document","getElementById","covertToXML","Inputs","xmlInputs","forEach","i","push","handlingGetAction","setState","isAction","fetchIsDone","hasMedications","inputsArr","http","XMLHttpRequest","open","QuerySearchXML","inputs","declaration","setRequestHeader","send","onreadystatechange","readyState","results","xml2js","responseText","console","log","parseInt","code","meds","med","slice","this","bind","alert","state","Component","Empty","App","path","component","ReactDOM","render"],"mappings":"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","file":"static/js/main.30919c6d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SearchBar.css\";\n\nfunction SearchBar(props) {\n    return(\n      <div className = \"formContainer\">\n        <div className = \"InputParams\">\n          <input  id=\"drugCode\"\n                  type=\"text\"\n                  name=\"drugCode\"\n                  placeholder=\"Enter the drug code\"\n            />\n          <input  id=\"diseaseCode\"\n                  type=\"text\"\n                  name=\"diseaseCode\"\n                  placeholder=\"Enter the disease code\"\n            />\n          <select id = \"type\"\n                  type =\"number\"\n                  name=\"type\" >\n                <option value=\"\"> Type </option>\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n          </select>\n        </div>\n          <input  type=\"submit\"\n                  value=\"Search\"\n                  onClick = {props.onAction}\n            />\n      </div>\n    )\n}\nexport default SearchBar;\n","import React from \"react\";\nimport \"./Table.css\";\n\nfunction Table(props) {\n    const Medications = props.medications[0];\n    const MedicationsKeys = Object.keys(Medications);\n    return(\n      <table>\n      <thead>\n      {\n        <tr>\n        {\n          MedicationsKeys.map((mkey, index) => {\n            return(\n              <th key = {index} >\n              {\n                mkey[0].toUpperCase() + mkey.substring(1,mkey.length)\n              }\n              </th>\n            )\n          })\n        }\n        </tr>\n      }\n      </thead>\n      <tbody>\n      {\n        props.medications.map((medication,index) => {\n          const {id, description, drugcode, diseasecode, type}  = medication;\n          return(\n            <tr key = {index}>\n            <td>{id}</td>\n            <td>{description}</td>\n            <td>{drugcode}</td>\n            <td>{diseasecode}</td>\n            <td>{type}</td>\n            </tr>\n          )\n        })\n      }\n      </tbody>\n      </table>\n    )\n}\nexport default Table;\n","import React, { Component } from \"react\";\nimport SearchBar from '../../components/SearchBar';\nimport Table from '../../components/Table';\nimport \"./Home.css\";\n\nvar xml = require('xml');\nvar X2JS = require('x2js');\nvar x2js = new X2JS();\n\n\nclass HomeView extends Component {\n  constructor(){\n    super();\n    this.state = {\n\n    };\n  }\n\n  readInputs  = () => {\n    var drugCode = document.getElementById(\"drugCode\");\n    var diseaseCode = document.getElementById(\"diseaseCode\");\n    var type = document.getElementById(\"type\");\n    var inputsArr = [drugCode, diseaseCode, type];\n    return inputsArr;\n  }\n\n  covertToXML = (Inputs) => {\n    var xmlInputs = [];\n    Inputs.forEach(function(i) {\n        if (!i.value) {\n          xmlInputs.push({ [i.name] : i.name })\n        }else {\n          xmlInputs.push({ [i.name] : i.value })\n        }\n    })\n    return xmlInputs;\n  }\n\n  handlingGetAction = () => {\n\n    // Handle Click button\n    this.setState({isAction:true, fetchIsDone: false, hasMedications: false });\n\n    // read Inputs before fetching.\n    const inputsArr = this.readInputs();\n\n    // Convert Form Inputs / XML format\n    const xmlInputs = this.covertToXML(inputsArr);\n\n\n   // Create XMLHttpRequest\n   var http = new XMLHttpRequest();\n   var url = \"/api/getMedicationsInfo\";\n   // Open the XHR request.\n   http.open(\"POST\", url, true);\n\n   // Prepare the search query\n   const QuerySearchXML = xml({inputs: xmlInputs}, { declaration: true });\n\n   // XHR Response Handling\n   http.setRequestHeader('Content-Type', 'text/xml'); // Set headers\n   http.send(QuerySearchXML); // Send the XML Request.\n\n   // XHR Response Handling\n   try {\n     http.onreadystatechange = function() {\n          if(http.readyState === 4) {\n            var  {results} = x2js.xml2js(http.responseText);\n            console.log(results);\n\n            if(parseInt(results.code) === 1 ){\n              var meds = results.medications.med;\n                if ( meds.length > 1000 ) {\n                      meds = meds.slice(1,1000)\n                }\n                this.setState({\n                      fetchIsDone: true,\n                      hasMedications: true,\n                      medications: meds\n                  })\n\n            }\n            else{\n              this.setState({\n                    fetchIsDone: true,\n                    hasMedications: false\n                 })}\n\n          }\n        }\n   .bind(this)\n   }\n   catch {\n         alert('Request Failed!')\n       }\n  }\n\n  render(){\n    return(\n      <div className = 'Home'>\n        <h1 className=\"Title\"> Drugs & Medications Search </h1>\n        <SearchBar onAction = {this.handlingGetAction} />\n        {\n       this.state.isAction ?\n         !this.state.fetchIsDone ?\n           <h1> Loading ... </h1>\n           :\n            <div className =\"MedicationsViewSection\">\n               <h2 className = \"ShowResultsTitle\"> The most retrieved drugs and medications are: </h2>\n               {\n                 !this.state.hasMedications ?\n                 <Empty />\n                 :\n                 <Table medications = {this.state.medications}/>\n               }\n            </div>\n         :\n         null\n       }\n      </div>\n  )\n  }\n}\nconst Empty = () => <center><h1> No Medications </h1></center>\nexport default HomeView;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport HomeView from \"./Views/HomeView\";\nimport './App.css';\n\nclass App extends Component {\n  render(){\n  return (\n    <Router>\n        <Route path=\"/\" component={HomeView} />\n    </Router>\n  );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}