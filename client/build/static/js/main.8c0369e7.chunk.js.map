{"version":3,"sources":["components/SearchBar/index.js","components/Table/index.js","Views/MedicationsView/index.js","Views/HomeView/index.js","App.js","index.js"],"names":["SearchBar","props","className","id","type","name","placeholder","value","onClick","onAction","Table","Medications","medications","MedicationsKeys","Object","keys","map","mkey","index","key","toUpperCase","substring","length","medication","decription","drugcode","diseasecode","HomeView","readInputs","document","getElementById","handlingGetAction","setState","isAction","fetchIsDone","hasMedications","inputsArr","query","forEach","i","slice","fetch","then","res","json","result","console","log","code","state","this","MedicationsView","Component","Empty","App","path","component","ReactDOM","render"],"mappings":"iWAgCeA,MA7Bf,SAAmBC,GACf,OACE,yBAAKC,UAAY,iBACf,yBAAKA,UAAY,eACf,2BAAQC,GAAG,WACHC,KAAK,OACLC,KAAK,WACLC,YAAY,wBAEpB,2BAAQH,GAAG,cACHC,KAAK,OACLC,KAAK,cACLC,YAAY,2BAEpB,4BAAQH,GAAK,OACLC,KAAM,SACNC,KAAK,QACP,4BAAQE,MAAM,IAAd,UACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,OAGN,2BAAQH,KAAK,SACLG,MAAM,SACNC,QAAWP,EAAMQ,a,MCiBpBC,MAzCf,SAAeT,GACX,IAAMU,EAAcV,EAAMW,YAAY,GAChCC,EAAkBC,OAAOC,KAAKJ,GACpC,OACE,+BACA,+BAEE,4BAEEE,EAAgBG,KAAI,SAACC,EAAMC,GACzB,OACE,wBAAIC,IAAOD,GAETD,EAAK,GAAGG,cAAgBH,EAAKI,UAAU,EAAEJ,EAAKK,cASxD,+BAEErB,EAAMW,YAAYI,KAAI,SAACO,EAAWL,GAAW,IACpCf,EAAgDoB,EAAhDpB,GAAIqB,EAA4CD,EAA5CC,WAAYC,EAAgCF,EAAhCE,SAAUC,EAAsBH,EAAtBG,YAAatB,EAASmB,EAATnB,KAC9C,OACE,wBAAIe,IAAOD,GACX,4BAAKf,GACL,4BAAKqB,GACL,4BAAKC,GACL,4BAAKC,GACL,4BAAKtB,UCxBFO,MAPf,SAAsBV,GAChB,OACE,6BACE,kBAAC,EAAD,CAAOW,YAAeX,EAAMW,gBCFhCe,G,kBACJ,aAAc,IAAD,8BACX,+CAGFC,WAAc,WAKZ,MADgB,CAHDC,SAASC,eAAe,YACrBD,SAASC,eAAe,eAC/BD,SAASC,eAAe,UAPxB,EAWbC,kBAAoB,WAGlB,EAAKC,SAAS,CAACC,UAAS,EAAMC,aAAa,EAAOC,gBAAgB,IAGlE,IAAMC,EAAY,EAAKR,aAGnBS,EAAQ,IACZD,EAAUE,SAAS,SAASC,GAC1BF,EAAQA,GAASE,EAAElC,KAAO,MAAOkC,EAAEhC,MAAQgC,EAAEhC,MAAQgC,EAAElC,MAAQ,OAEjEgC,EAAQA,EAAMG,MAAM,GAAI,GAGxBC,MAAM,0BAA4BJ,GACjCK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEJC,QAAQC,IAAIF,GAGS,IAAhBA,EAAOG,KAEV,EAAKhB,SAAS,CAAEE,aAAa,EAAMC,gBAAgB,EAAMvB,YAAaiC,EAAOjC,cACrD,IAAhBiC,EAAOG,MAEf,EAAKhB,SAAS,CAAEE,aAAa,EAAMC,gBAAgB,QArCvD,EAAKc,MAAQ,GAFF,E,sEA6CX,OACE,yBAAK/C,UAAY,QACf,wBAAIA,UAAU,SAAd,gCACA,kBAAC,EAAD,CAAWO,SAAYyC,KAAKnB,oBAE5BmB,KAAKD,MAAMhB,SACRiB,KAAKD,MAAMf,YAGT,yBAAKhC,UAAW,0BACb,wBAAIA,UAAY,oBAAhB,8CAEEgD,KAAKD,MAAMd,eACX,kBAACgB,EAAD,CAAiBvC,YAAesC,KAAKD,MAAMrC,cAE3C,kBAAC,EAAD,OARN,6CAYF,U,GAjEawC,cAuEjBC,EAAQ,kBAAM,iDACL1B,IC/DA2B,G,uLAPb,OACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW7B,S,GAJjByB,cCAlBK,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAASC,eAAe,W","file":"static/js/main.8c0369e7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./SearchBar.css\";\n\nfunction SearchBar(props) {\n    return(\n      <div className = \"formContainer\">\n        <div className = \"InputParams\">\n          <input  id=\"drugCode\"\n                  type=\"text\"\n                  name=\"drugCode\"\n                  placeholder=\"Enter the drug code\"\n            />\n          <input  id=\"diseaseCode\"\n                  type=\"text\"\n                  name=\"diseaseCode\"\n                  placeholder=\"Enter the disease code\"\n            />\n          <select id = \"type\"\n                  type =\"number\"\n                  name=\"type\" >\n                <option value=\"\"> Type </option>\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n          </select>\n        </div>\n          <input  type=\"submit\"\n                  value=\"Search\"\n                  onClick = {props.onAction}\n            />\n      </div>\n    )\n}\nexport default SearchBar;\n","import React from \"react\";\nimport \"./Table.css\";\n\nfunction Table(props) {\n    const Medications = props.medications[0];\n    const MedicationsKeys = Object.keys(Medications);\n    return(\n      <table>\n      <thead>\n      {\n        <tr>\n        {\n          MedicationsKeys.map((mkey, index) => {\n            return(\n              <th key = {index} >\n              {\n                mkey[0].toUpperCase() + mkey.substring(1,mkey.length)\n              }\n              </th>\n            )\n          })\n        }\n        </tr>\n      }\n      </thead>\n      <tbody>\n      {\n        props.medications.map((medication,index) => {\n          const {id, decription, drugcode, diseasecode, type}  = medication;\n          return(\n            <tr key = {index}>\n            <td>{id}</td>\n            <td>{decription}</td>\n            <td>{drugcode}</td>\n            <td>{diseasecode}</td>\n            <td>{type}</td>\n            </tr>\n          )\n        })\n      }\n      </tbody>\n      </table>\n    )\n}\nexport default Table;\n","import React from \"react\";\nimport Table from '../../components/Table';\n\n\nfunction Medications (props){\n      return(\n        <div>\n          <Table medications = {props.medications}/>\n        </div>\n      )\n    }\nexport default Medications;\n","import React, { Component } from \"react\";\nimport SearchBar from '../../components/SearchBar';\nimport MedicationsView from '../MedicationsView';\nimport \"./Home.css\";\n\nclass HomeView extends Component {\n  constructor(){\n    super();\n    this.state = {};\n  }\n  readInputs  = () => {\n    var drugCode = document.getElementById(\"drugCode\");\n    var diseaseCode = document.getElementById(\"diseaseCode\");\n    var type = document.getElementById(\"type\");\n    var inputsArr = [drugCode, diseaseCode, type];\n    return inputsArr;\n  }\n  handlingGetAction = () => {\n\n    // Handle Click button\n    this.setState({isAction:true, fetchIsDone: false, hasMedications: false });\n\n    // read Inputs before fetching.\n    const inputsArr = this.readInputs();\n\n    // Prepare the search query\n    var query = '?';\n    inputsArr.forEach( function(i) {\n      query = query + (i.name + \"=\" + (i.value ? i.value : i.name) + \"&\");\n    })\n    query = query.slice(0, -1);\n\n    // Do fetch.\n    fetch('/api/getMedicationsInfo' + query)\n    .then(res => res.json())\n    .then(result => {\n\n      console.log(result);\n\n    // handling response for successed request.\n        if(result.code === 1){\n        // There are medications.\n        this.setState({ fetchIsDone: true, hasMedications: true, medications: result.medications })\n      } else if(result.code === 2){\n        // No Medications.\n        this.setState({ fetchIsDone: true, hasMedications: false })\n      }\n    })\n}\n\n  render(){\n    return(\n      <div className = 'Home'>\n        <h1 className=\"Title\"> Drugs & Medications Search </h1>\n        <SearchBar onAction = {this.handlingGetAction} />\n        {\n        this.state.isAction ?\n          !this.state.fetchIsDone ?\n            <h1> Loading ... </h1>\n            :\n             <div className =\"MedicationsViewSection\">\n                <h2 className = \"ShowResultsTitle\"> The retrieved drugs and medications are: </h2>\n                {\n                  this.state.hasMedications ?\n                  <MedicationsView medications = {this.state.medications}/>\n                :\n                  <Empty />\n                }\n            </div>\n          :\n          null\n        }\n      </div>\n    )\n  }\n}\nconst Empty = () => <h1> No Medications </h1>;\nexport default HomeView;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport HomeView from \"./Views/HomeView\";\nimport './App.css';\n\nclass App extends Component {\n  render(){\n  return (\n    <Router>\n        <Route path=\"/\" component={HomeView} />\n    </Router>\n  );\n}\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}